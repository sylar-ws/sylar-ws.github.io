{"pages":[{"url":"http://sylar-ws.github.io/pelican-2.html","text":"1、elegent 主题相关设置 1.1 安装依赖plugin 使用plugin：在github pelican-plugins 下载需要的plugin，放到任意路径。在pelicanconf.py中配置路径 PLUGIN_PATHS = [\"**\\Pelican\\plugin\",] , 使用 PLUGINS = ['sitemap', 'extract_toc', 'tipue_search'] 指定要加载的plugin。 1.1.1 设置sitemap 使用readme.md中的默认设置： SITEMAP = { 'format': 'xml', 'priorities': { 'articles': 0.5, 'indexes': 0.5, 'pages': 0.5 }, 'changefreqs': { 'articles': 'monthly', 'indexes': 'daily', 'pages': 'monthly' } } 1.1.2 设置Tipue Search 如果你的搜索功能也有undefine问题，可以按一下方法解决。 找到Tipue Search插件的源文件tipue_search.py，在函数 create_json_node 和函数 create_tpage_node 中修改： node = {'title': page_title, 'text': page_text, 'tags': page_category, 'url': page_url, 'loc': page_url} 原因可能是实现搜索的js文件中将loc作为关键字获取文章链接，但是tipue_search.py并没有在生成的json文件中为文章指定loc字段。 1.2 设置首页 在pelicanconf.py中添加LANDING_PAGE_ABOUT, 注意details中可以使用html标签： LANDING_PAGE_ABOUT = { 'title' : 'title', 'details' : ''' My name is ***. ''' } 1.3 相关阅读设置 文章底部显示上一篇文章和下一篇文章链接。 2、评论模块 在 disqus 申请帐号，记住short name，在publishconf.py中添加配置： DISQUS_SITENAME = \"short name\" 3、域名设置","tags":"web","loc":"http://sylar-ws.github.io/pelican-2.html","title":"Pelican搭建博客——第二篇"},{"url":"http://sylar-ws.github.io/pelican-1.html","text":"0、环境说明 环境：python 2.7 系统：windows 10 64bit 1、安装pelican pip install pelican markdown 安装pelican遇到问题 \"UnicodeDecodeError\"，参考 笔记 pip install UnicodeDecodeError 2、pelican quickstart 2.1 创建测试目录 test mkdir test 2.2 执行pelican-quickstart pelican-quickstart test 目录的结构 test/ ├── content # 存放输入的源文件 │ └── (pages) # 存放手工创建的静态页面 ├── output # 生成的输出文件 ├── develop_server.sh # 方便开启测试服务器 ├── Makefile # 方便管理博客的Makefile ├── pelicanconf.py # 主配置文件 └── publishconf.py # 发布时使用的配置文件 2.3 在content目录下添加 test.md 文章, 文章开头必须添加一下内容: Title : My First Blog Date : 2016 - 5 - 16 10 : 20 Category : test 2.4 生成Blog站点 pelican content output 目录中会生成相关内容 2.5 本地预览 develop_server start 8000 打开浏览器输入地址：http://localhost:8000/ 即可访问. 3、进一步探索 3.1 content/pages 该目录下存储静态页面，如About、Contact，默认会在导航栏中显示，通过设置 DISPLAY_PAGES_ON_MENU 不显示。 If you want to exclude any pages from being linked to or listed in the menu then add a status: hidden attribute to its metadata. This is useful for things like making error pages that fit the generated theme of your site. 3.2 引用站内内容 3.2.1 引用站内页面 Linking to internal content This makes it easier to link from the current post to other content that may be sitting alongside that post (instead of having to determine where the other content will be placed after site generation). 比如有如下文件结构 website/ ├── content │ ├── category/ │ │ └── article1.rst │ ├── article2.md │ └── pages │ └── about.md └── pelican.conf.py article2 引用 article1， article2.md 的内容 Title : The second article Date : 2012 - 12 - 01 10 : 02 See below intra - site link examples in Markdown format . [ a link relative to the current file ]({ filename } category / article1 . rst ) [ a link relative to the content root ]({ filename }/ category / article1 . rst ) {filename} 可以理解为关键字，后接相对路径 3.2.2 引用静态文件 引用图片(jpg png)、普通文件(pdf txt zip)等，直接在content目录下建立相关目录 content/images/ content/files/ 引用方式与引用静态页面相似 ![Alt Text]({filename}/images/han.jpg) pelicanconf.py 中的 STATIC_PATHS 控制哪些目录在生成时拷贝到output目录中 STATIC_PATHS = ['images', 'pdfs'] 默认配置中包含images，其他目录需要手动添加 3.2.3 使用 attach 引用静态文件 Starting with Pelican 3.5, static files can be \"attached\" to a page or article using this syntax for the link target: {attach}path/to/file This works like the {filename} syntax, but also relocates the static file into the linking document's output directory. If the static file originates from a subdirectory beneath the linking document's source, that relationship will be preserved on output. Otherwise, it will become a sibling of the linking document. 仅对静态文件有效，并且文件目录配置 在STATIC_PATHS 中。 比如，有如下目录结构 content ├── blog │ ├── icons │ │ └── icon.png │ ├── photo.jpg │ └── testpost.md └── downloads └── archive.zip pelicanconf.py 配置内容： PATH = 'content' STATIC_PATHS = ['blog', 'downloads'] ARTICLE_PATHS = ['blog'] ARTICLE_SAVE_AS = '{date:%Y}/{slug}.html' ARTICLE_URL = '{date:%Y}/{slug}.html' testpost.md 内容： Title : Test Post Category : test Date : 2014 - 10 - 31 ! [ Icon ]({ attach } icons / icon . png ) ! [ Photo ]({ attach } photo . jpg ) [ Downloadable File ]({ attach } / downloads / archive . zip ) 生成后，output目录内容 output └── 2014 ├── archive.zip ├── icons │ └── icon.png ├── photo.jpg └── test-post.html 如果同一个静态文件被多次 attach，这个文件的 relocate 只在这些引用中第一个被处理的时候有效，之后该文件的 attach 的处理类似 filename。 如果这些引用位于不同的页面中，那么静态文件 relocate 后的位置将是不确定的，如果有其他站点引用这个静态文件的地址，那么随着多次 build，这些地址很可能会失效。 因此建议只有在 静态文件 只在同一个页面中引用时使用{attach}，或者多个页面时，这些页面都在同一个目录下。 3.2.4 引用tag和categories {tag}tagname {category}foobar 3.3 语法高亮 TODO 3.4 Publishing drafts 如果想把一片文章发布为 draft (先让朋友试看，在正式发布之前)，可以给文章的metadata添加 Status: draft 属性，这样的文章会被放到drafts目录下，在首页或是分类查看时都是不可见的。 如果想将所有文章默认发布为 draft，可以在配置文件中添加： DEFAULT_METADATA = { 'status': 'draft', } 这时想要正式发布一篇文章时，需要在metadata添加 Status: published 属性。 4、部署到github pages 在publishconf.py中配置SITEURL = 'http://yoursite.github.io' 使用make，依据个人习惯，修改一下makefile，做到一键发布即可。 5、修改 theme 5.1 pelican-themes 工具管理主题 查看当前安装的主题 pelican-themes -l -v 安装新主题,可以依次安装多个 pelican-themes -vi ~/Dev/Python/pelican-themes/two-column\\ ~/Dev/Python/pelican-themes/martyalchin \\ 删除主题 pelican-themes --remove two-column or pelican-themes -r martyachin notmyidea-cmd -v 5.2 设置主题 在 pelicanconf.py 中指定 THEME = \"theme\" //默认主题或是使用pelican-themes安装的主题 THEME_STATIC_DIR = 'theme' //THEME_STATIC_PATHS中收集到的静态文件在output中的目录，默认为theme THEME_STATIC_PATHS = ['static'] //Static theme paths，主题的目录中 static文 //件的目录名，会被拷贝到output下 CSS_FILE = 'main.css' //指定想要加载css文件 第二篇内容预览: elegent主题相关设置 加入评论模块-disqus 文章中图片的处理-图床选择 域名绑定","tags":"web","loc":"http://sylar-ws.github.io/pelican-1.html","title":"Pelican搭建博客——第一篇"},{"url":"http://sylar-ws.github.io/tigaoxiaolv.html","text":"提高学习工作效率的方法 前言 为了提高学习效率，通过查阅资料和长期实践，最终确定下了 GTD+番茄工作法 的组合，使用GTD管理任务和目标，使用番茄工作法让自己在一段时间内专注于手头上的工作。 GTD 本文中GTD的定义和理念 GTD 即 Get Things Done ，GTD的核心理念概括就是必须记录下来要做的事，然后整理安排并使自己一一去执行。 如果你查询过什么是GTD，那么你很可能看到了百度百科中对GTD的解释，而且很可能你被那冗长的词条吓到了，不用怕，本文所指的GTD并没那么复杂，本文的GTD简单来说就是To Do List + 四象限法 + 日历的一个组合，To Do List记录需要完成的任务，同时在To Do List中按四象限法定义四个子集，将不同的任务按照实际需求放到四个子集中，最后在将To Do List中任务的信息和完成时间同步到日历中，如果选择的工具可以全平台通用，那么几乎可以做到任何时候都可以准确的把握应该着手尽快完成的任务。 四象限法：将任务分为重要紧急、重要不紧急、不重要紧急、不重要不紧急四类。 GTD App 推荐： 奇妙清单(wunder list) ：全平台 番茄工作法 番茄工作法是由 弗朗西斯科·西里洛 于1992年创立的一种相对于GTD更微观的时间管理方法。 番茄工作法流程：选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，然后进行短休息5分钟，每完成4个番茄进行一次长休息15分钟。番茄时间、休息时间可以根据自己的情况调整。 个人对番茄工作法见解： 工作时的紧急任务，无需番茄工作法也可以沉下心来做的，就没必要用番茄工作法了，这时番茄工作法可能会切到反作用（打断思路）。比如：写代码、做设计。 逼自己看书时或是做其他不情愿做的事时，番茄工作法有奇效。 番茄工作法 App 推荐： android：发条番茄 ios：潮汐","tags":"技术","loc":"http://sylar-ws.github.io/tigaoxiaolv.html","title":"提高效率"}]}